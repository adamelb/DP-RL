import numpy as np
from scipy import sparse

def make_bucket_mapping(n):
    """
    For any integer n >= 1, returns:
      • g: an int array of length n, where x_i = y[g[i]]
      • C: an (n × m) sparse matrix so that x = C @ y
      • values: a length-m array of “default” bucket values

    Pattern:
      1) three 1’s, three 3’s,
      2) then blocks of v repeated v times for v = 6, 9, 12, …
      3) finally two 1’s at the end
    Special‐case:
      • If n == 1, returns a single bucket with value 1.
    """
    # ─── Special‐case for n==1 ─────────────────────────────────────────────
    if n == 1:
        g = np.array([0], dtype=int)
        C = sparse.csr_matrix(([1], ([0], [0])), shape=(1, 1))
        return g, C, np.array([1.0])

    # ─── 1) Build the (value, count) blocks until we can still reserve 2 slots ─
    blocks = [(1, 3), (3, 3)]
    total = 3 + 3
    v = 6
    while total + 2 < n:
        blocks.append((v, v))
        total += v
        v += 3

    # ─── 2) Flatten those blocks into the first (n−2) positions of g ─────────
    g = []
    remain = n - 2
    for idx, (_, cnt) in enumerate(blocks):
        take = min(cnt, remain - len(g))
        g.extend([idx] * take)
        if len(g) >= remain:
            break

    # ─── 3) Force the last two entries to bucket 0 (value = 1) ──────────────
    g.extend([0] * (n - len(g)))
    g = np.array(g, dtype=int)

    # ─── 4) Extract the bucket‐values y from blocks ───────────────────────────
    values = np.array([val for val, _ in blocks], dtype=float)

    # ─── 5) Build the (n × m) sparse “lifting” matrix C ─────────────────────
    rows = np.arange(n)
    cols = g
    data = np.ones(n, dtype=float)
    C = sparse.csr_matrix((data, (rows, cols)), shape=(n, len(values)))

    return g, C, values

# ─── Example usage ─────────────────────────────────────────────────────────
if __name__ == "__main__":
    for n in [1, 5, 20]:
        g, C, values = make_bucket_mapping(n)
        print(f"\nn = {n}")
        print(" m =", len(values))
        print(" values =", values)
        print(" g mapping =", g)
        # x_approx = C.dot(values)
        # print(" x approx =", x_approx)