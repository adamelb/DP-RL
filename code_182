import numpy as np

def gradient_reduced(r, alpha, A, c, B, L, eps=1e-8):
    """
    Compute the reduced gradient ∇F(r) by summing the full-gradient entries over each bucket.

    Parameters:
    - r: array of shape (m,), reduced variable
    - alpha, A, c, B: original problem data
    - L: list or array of length m, bucket sizes summing to n
    - eps: small constant to avoid division by zero

    Returns:
    - g_reduced: array of shape (m,), the gradient in reduced space
    """
    # 1) Expand to full p
    p = np.repeat(r, L)

    # 2) Compute the full gradient ∇f(p) of shape (n,)
    g_full = gradient_full(p, alpha, A, c, B, eps)

    # 3) Build cumulative boundaries for buckets
    boundaries = np.concatenate(([0], np.cumsum(L)))

    # 4) Sum gradient entries within each bucket to get length-m vector
    g_reduced = np.array([
        g_full[boundaries[k] : boundaries[k+1]].sum()
        for k in range(len(L))
    ])

    return g_reduced