# ------------------------------------------------------------------
# Robust broadcast‑only feature builder (no memory copy, no OOM)
# ------------------------------------------------------------------
def features(p: torch.Tensor,
             a: torch.Tensor,
             c: torch.Tensor,
             rho: torch.Tensor,
             tl: torch.Tensor) -> torch.Tensor:
    """
    Build 17‑D feature vector.  Whatever the shapes of c, rho, tl, they are
    broadcast to match `p` (e.g. p.shape == (B, M)).
    """
    shape = p.shape                           # target

    # cheap broadcast views (no new memory)
    c   = torch.broadcast_to(c,   shape)
    rho = torch.broadcast_to(rho, shape)
    tl  = torch.broadcast_to(tl,  shape)
    a   = torch.broadcast_to(a,   shape)

    sp, sa = torch.sign(p), torch.sign(a)

    return torch.stack([
        torch.ones_like(p),      # 0  constant
        p, a, p * a,             # 1–3
        p * p, a * a,            # 4–5
        sp, sa, a * sp, p * sa,  # 6–9  kinks
        c * torch.abs(p),        # 10
        tl * p * p,              # 11
        c * torch.abs(a),        # 12
        c, rho, tl,              # 13–15 raw params
        torch.zeros_like(p),     # 16 spare
    ], dim=-1)                   # (..., 17)