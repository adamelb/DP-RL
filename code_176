import numpy as np

def _compute_bucket_index(n):
    """
    Internal: for any n>=1 returns g of length n (dtype=int),
    where g[i] is the bucket-index for x_i.
    """
    if n == 1:
        return np.array([0], dtype=int)

    # 1) build (value,count) blocks until we can still reserve 2 slots:
    blocks = [(1, 3), (3, 3)]
    total = 6
    v = 6
    while total + 2 < n:
        blocks.append((v, v))
        total += v
        v += 3

    # 2) flatten into first (n-2) positions:
    g = []
    target = n - 2
    for idx, (_, cnt) in enumerate(blocks):
        take = min(cnt, target - len(g))
        g.extend([idx] * take)
        if len(g) >= target:
            break

    # 3) pad last two entries into bucket 0 (value=1)
    g.extend([0] * (n - len(g)))
    return np.array(g, dtype=int)

# Public API:

def effective_shape(n):
    """
    Returns the reduced-dimension m for an n-length problem.
    """
    g = _compute_bucket_index(n)
    return int(g.max()) + 1

def expand(y, n):
    """
    Given y of length m = effective_shape(n), returns x of length n
    by repeating y according to our bucket‐rule.
    """
    g = _compute_bucket_index(n)
    y = np.asarray(y)
    assert y.shape[0] == (g.max() + 1), \
        f"Expected y of length {g.max()+1}, got {y.shape[0]}"
    return y[g]


# ─── Example usage ────────────────────────────────────────────────────────

if __name__ == "__main__":
    # Suppose your objective f takes an n-vector:
    def f(x):
        # ... your real objective here ...
        return np.sum((x - np.linspace(0,1,len(x)))**2)

    for n in [1, 5, 20]:
        m = effective_shape(n)
        print(f"n={n} → optimize over m={m} buckets")

        # initial guess in R^m
        y0 = np.zeros(m)

        # wrap for your optimizer:
        def F(y):
            x = expand(y, n)
            return f(x)

        # e.g. using scipy.optimize.minimize:
        from scipy.optimize import minimize
        res = minimize(F, y0)
        y_opt = res.x
        x_opt = expand(y_opt, n)

        print("  y_opt =", np.round(y_opt,2))
        print("  x_opt =", np.round(x_opt,2))
        print()