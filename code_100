import numpy as np
import torch
from scipy.linalg import solve_discrete_are

def batch_solve(data_cuda,
                tau1=1.0,
                tau2=5.0,
                gamma=0.99):
    """
    data_cuda: torch.Tensor[x,9] on CUDA,
       cols = [p,alpha1,alpha2,_, tl,rho1,rho2,imb1,imb2]
    returns:
       x: np.array[5000]   optimal action for each row
       V: np.array[5000]   corresponding value
    """
    # 1) cuda → cpu → numpy
    D = data_cuda.detach().cpu().numpy()   # (5000,9)

    # 2) unpack
    p      = D[:,0]
    α1     = D[:,1]
    α2     = D[:,2]
    tl     = D[:,4]
    ρ1     = D[:,5]
    ρ2     = D[:,6]
    im1    = D[:,7]
    im2    = D[:,8]

    # 3) stack your state vectors s_i = [p, im1, im2, α1, α2]
    S = np.stack([p, im1, im2, α1, α2], axis=1)   # (5000,5)

    # 4) fixed pieces
    ϕ1 = np.exp(-1.0/tau1)
    ϕ2 = np.exp(-1.0/tau2)

    # G and Q as in your original code
    G = np.array([1.0, 1-ϕ1, 1-ϕ2, 0.0, 0.0])[:,None]  # (5,1)
    Q = np.zeros((5,5))
    Q[0,0] = 1.0
    Q[0,3] = Q[3,0] = -1.0
    Q[0,4] = Q[4,0] = -1.0

    # preallocate storage
    Ks = np.zeros((len(S), 1, 5))    # will hold each K_i (1×5)
    Ms = np.zeros((len(S), 5, 5))    # will hold each M_i (5×5)
    cs = np.zeros(len(S))            # constant terms

    # 5) loop once to solve all 5 000 Riccatis
    for i in range(len(S)):
        # build F_i, N_i, R_i
        F = np.diag([1.0, ϕ1, ϕ2, ρ1[i], ρ2[i]])
        N = np.zeros((5,1))
        N[0,0] = 1.0
        N[1,0] = 0.5 * tl[i] * ϕ1
        N[2,0] = 0.5 * tl[i] * ϕ2
        N[3,0] = -1.0
        N[4,0] = -1.0

        R = 1.0 + tl[i]*(2.0 - ϕ1 - ϕ2)
        Rinv = 1.0 / R

        Ftil = F - G @ (N.T * Rinv)
        Qt   = Q - (N @ N.T)*Rinv

        # discrete ARE:    solve Aᵀ M A - M - (Aᵀ M B)(R + Bᵀ M B)⁻¹(Bᵀ M A) + Q = 0
        Abar = np.sqrt(gamma) * Ftil
        Bbar = np.sqrt(gamma) * G
        M    = solve_discrete_are(Abar, Bbar, Qt, R)   # (5,5)
        Ms[i] = M

        # compute K_i = (Nᵀ + γ Gᵀ M F) / (R + γ Gᵀ M G)
        num  = N.T + gamma * (G.T @ M @ F)    # (1×5)
        den  = R + gamma * float((G.T @ M @ G)[0,0])
        K    = num / den                      # (1×5)
        Ks[i] = K

        # constant term from the noise‐trace
        σ = np.zeros((5,2))
        σ[3,0] = np.sqrt(1 - ρ1[i]**2)
        σ[4,1] = np.sqrt(1 - ρ2[i]**2)
        trace_term = np.trace(σ.T @ M @ σ)
        cs[i] = - (gamma / (2*(1-gamma))) * trace_term

    # 6) now batch‐compute x and V
    # x_i = - K_i s_i
    x = - np.einsum('ijk,ik->i', Ks, S)

    # sᵀ M s  for each i
    sMs = np.einsum('ij,ijk,ik->i', S, Ms, S)

    # V_i = -½ sᵀ M s  + c_i
    V = -0.5 * sMs + cs

    return x, V