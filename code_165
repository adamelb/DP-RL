# ================================================================
#  DIAGNOSTIC & ROBUST SOLVE OF THE INFINITE-HORIZON DARE
#  ---------------------------------------------------------------
#  Vous avez rencontré :  “failed to find a finite solution”.
#  ►  Les causes classiques sont :
#      1)  R  non définie‐positive   (ici  R = tilde_R  ≤ 0)
#      2)  (A,B)   *non stabilisable*
#      3)  (A, Q-S R⁻¹Sᵀ) *non détectable*
#
#  Le script ci-dessous :
#      • vérifie ces trois conditions
#      • régularise R le cas échéant (ε > 0)
#      • donne deux méthodes :
#          –  solve_discrete_are     (fermé, SciPy)
#          –  itération de Riccati   (boucle jusqu’à convergence)
# ================================================================

import numpy as np
from numpy.linalg import matrix_rank
from scipy.linalg import solve_discrete_are, eigvals

# ----------------------------------------------------------------
# 0.  ********  REMPLISSEZ VOS PROPRES PARAMÈTRES  ****************
# ----------------------------------------------------------------
phi1, phi2 = 0.75, 0.90          # <- vos valeurs ici
tilde_R    = 2 - phi1 - phi2     # **doit rester > 0 !**
sigma1     = 0.18
r_coef     = sigma1 / 30.0

rho = np.array([[0.96, 0.02, 0.00],
                [0.00, 0.90, 0.05],
                [0.01, 0.00, 0.85]])

Sigma = np.diag([0.02, 0.015, 0.01])

# ----------------------------------------------------------------
# 1.  MATRICES D’ÉTAT
# ----------------------------------------------------------------
A = np.block([
    [1,         0,         0,        np.zeros((1,3))],
    [0,     phi1,         0,        np.zeros((1,3))],
    [0,        0,     phi2,        np.zeros((1,3))],
    [np.zeros((3,1)), np.zeros((3,1)), np.zeros((3,1)), rho]
])

B = np.array([[1],
              [1 - phi1],
              [1 - phi2],
              [0],
              [0],
              [0]])

#  ----  coefficients quadratiques  ----
Q = np.zeros((6, 6))
Q[0, 3] = Q[3, 0] = r_coef
S = np.zeros((6, 1))
S[1, 0] = -0.5 * phi1
S[2, 0] = -0.5 * phi2
S[3, 0] = r_coef
R = np.array([[tilde_R]])

# ----------------------------------------------------------------
# 2.  DIAGNOSTIC : STABILISABILITÉ & DÉTECTABILITÉ
# ----------------------------------------------------------------
def stabilisable(A, B):
    """True si (A,B) stabilisable (tous modes instables contrôlables)."""
    n = A.shape[0]
    unstable_eigs = [l for l in eigvals(A) if abs(l) >= 1 - 1e-12]
    if not unstable_eigs:
        return True                                    # déjà stable
    controllability = np.hstack([np.linalg.matrix_power(A, k) @ B
                                 for k in range(n)])
    rank_C = matrix_rank(controllability, tol=1e-10)
    return rank_C == n

def detectable(A, Qs):
    """True si (A,Qs^{1/2}) détectable (tous modes instables observables)."""
    n = A.shape[0]
    C  = Qs
    unstable_eigs = [l for l in eigvals(A) if abs(l) >= 1 - 1e-12]
    if not unstable_eigs:
        return True
    observability = np.vstack([C @ np.linalg.matrix_power(A, k)
                               for k in range(n)])
    rank_O = matrix_rank(observability, tol=1e-10)
    return rank_O == n

test_stab  = stabilisable(A, B)
test_detec = detectable(A.T, Q - S @ np.linalg.inv(R) @ S.T)

print("Stabilisable :", test_stab)
print("Détectable   :", test_detec)
print("R positive-déf :", (R > 0).all())

# ----------------------------------------------------------------
# 3.  SI R ≤ 0, ajout d’un petit ε > 0
# ----------------------------------------------------------------
if (R <= 0).any():
    eps = 1e-6
    print(f"\n⚠️  R n’est pas >0 – on ajoute ε={eps}")
    R[0, 0] = max(float(R[0, 0]), 0.0) + eps

# ----------------------------------------------------------------
# 4.  SOLUTION PAR solve_discrete_are  (SciPy)
# ----------------------------------------------------------------
try:
    P_scipy = solve_discrete_are(A, B, -Q, R, s=-S)   # rappel : −Q, −S
    K_scipy = np.linalg.inv(R + B.T @ P_scipy @ B) @ (B.T @ P_scipy @ A + S.T)
    print("\n✅  SciPy a trouvé une solution finie.")
except Exception as e:
    print("\n❌  SciPy échoue :", e)
    P_scipy = None

# ----------------------------------------------------------------
# 5.  SOLUTION PAR ITÉRATION DE RICCATI (backward fixe-point)
# ----------------------------------------------------------------
def riccati_iteration(A, B, Q, S, R, max_iter=10000, tol=1e-10):
    """Itère P_{k+1}=f(P_k) jusqu’à convergence."""
    P = np.zeros_like(Q)
    for k in range(max_iter):
        G  = B.T @ P @ B + R
        K  = np.linalg.solve(G, B.T @ P @ A + S.T)     # feedback
        Pn = Q + A.T @ P @ A + A.T @ P @ B @ K + S @ K + K.T @ S.T
        if np.linalg.norm(Pn - P, ord='fro') < tol:
            return Pn, K
        P = Pn
    raise RuntimeError("Riccati iteration did not converge")

try:
    P_iter, K_iter = riccati_iteration(A, B, -Q, -S, R)
    print("✅  Itération Riccati : convergence OK.")
except Exception as e:
    print("❌  Itération Riccati échoue :", e)
    P_iter, K_iter = None, None

# ----------------------------------------------------------------
# 6.  UTILISATION DES RÉSULTATS
# ----------------------------------------------------------------
P = P_scipy if P_scipy is not None else P_iter
K = K_scipy if P_scipy is not None else K_iter

if P is not None:
    print("\nP∞ (final) :\n", P.round(6))
    print("\nK∞ (feedback x* = −K∞ s) :\n", K.round(6))
    eig_cl = eigvals(A - B @ K)
    print("\nValeurs propres boucle fermée :\n", np.round(eig_cl, 6))
else:
    print("\nAucune solution finie trouvée — vérifiez vos paramètres.")