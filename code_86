import numpy as np
import torch, math

def ar1_T(grid: torch.Tensor, rho: float, n_mc: int = 12_000,
          dtype_out=torch.float16) -> torch.Tensor:
    """
    Monte‑Carlo transition matrix for an AR(1) process discretised on `grid`.
    Returns a (Ng, Ng) tensor of dtype `dtype_out` on the current CUDA device.
    """
    g = grid.cpu().numpy()                                   # (Ng,)
    # MC draws: each column is n_mc draws from the next‑state distribution
    samp = rho * g + math.sqrt(1.0 - rho * rho) * np.random.randn(n_mc, g.size)

    # project each sample to its nearest grid point
    # diffs shape: (n_mc, Ng, Ng)  broadcast OK → argmin over last axis
    proj = np.abs(samp[:, :, None] - g[None, None, :]).argmin(-1)   # (n_mc, Ng)

    # build the transition matrix
    T = np.zeros((g.size, g.size), dtype=np.float32)
    for col in range(g.size):                       # one column per current state
        idx, cnt = np.unique(proj[:, col], return_counts=True)
        T[col, idx] = cnt / n_mc                   # empirical probs  (row‑stochastic)

    return torch.as_tensor(T, dtype=dtype_out, device=grid.device)

  
